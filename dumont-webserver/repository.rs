//! SeaORM Entity. Generated by sea-orm-codegen 0.2.4

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "repository")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub repo_id: i32,
    pub org_id: i32,
    #[sea_orm(column_type = "Text")]
    pub repo_name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::orginization::Entity",
        from = "Column::OrgId",
        to = "super::orginization::Column::OrgId",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Orginization,
    #[sea_orm(has_many = "super::repository_labels::Entity")]
    RepositoryLabels,
    #[sea_orm(has_many = "super::repository_revision::Entity")]
    RepositoryRevision,
    #[sea_orm(has_many = "super::repository_revision_labels::Entity")]
    RepositoryRevisionLabels,
}

impl Related<super::orginization::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orginization.def()
    }
}

impl Related<super::repository_labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RepositoryLabels.def()
    }
}

impl Related<super::repository_revision::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RepositoryRevision.def()
    }
}

impl Related<super::repository_revision_labels::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RepositoryRevisionLabels.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
